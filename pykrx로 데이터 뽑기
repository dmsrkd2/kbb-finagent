import pandas as pd
from pykrx import stock
from tqdm import tqdm
import time
import warnings

# Suppress FutureWarning
warnings.simplefilter(action='ignore', category=FutureWarning)

def get_pbr_report_all():
    """
    Generates a quarterly PBR report for all non-preferred KOSPI and KOSDAQ stocks.
    """
    # Define the quarters for the report
    quarters = {
        "22년 1분기": ("20220101", "20220331"), "22년 2분기": ("20220401", "20220630"),
        "22년 3분기": ("20220701", "20220930"), "22년 4분기": ("20221001", "20221231"),
        "23년 1분기": ("20230101", "20230331"), "23년 2분기": ("20230401", "20230630"),
        "23년 3분기": ("20230701", "20230930"), "23년 4분기": ("20231001", "20231231"),
        "24년 1분기": ("20240101", "20240331"), "24년 2분기": ("20240401", "20240630"),
        "24년 3분기": ("20240701", "20240930"), "24년 4분기": ("20241001", "20241231"),
        "25년 1분기": ("20250101", "20250331"),
    }

    # Get all tickers from KOSPI and KOSDAQ
    try:
        base_date = "20240701"
        print(f"Fetching ticker lists for {base_date}...")
        kospi_tickers = stock.get_market_ticker_list(date=base_date, market="KOSPI")
        kosdaq_tickers = stock.get_market_ticker_list(date=base_date, market="KOSDAQ")
        all_tickers = kospi_tickers + kosdaq_tickers
        print(f"Found {len(all_tickers)} total tickers.")
    except Exception as e:
        print(f"Could not fetch ticker list dynamically. Error: {e}")
        # In case of failure, it's better to stop than to use a small sample
        return

    all_data = []

    # Process each ticker
    for ticker in tqdm(all_tickers, desc="Processing Tickers"):
        try:
            name = stock.get_market_ticker_name(ticker)
            # Exclude preferred stocks (those ending with '우')
            if name.endswith('우'):
                continue
        except Exception:
            # Skip if the ticker name cannot be fetched
            continue
        
        row_data = {'Ticker': ticker, 'Name': name}

        # Process each quarter
        for q_name, (start_date, end_date) in quarters.items():
            pbr = None
            try:
                # 1. Calculate the average stock price for the quarter
                df_price = stock.get_market_ohlcv(start_date, end_date, ticker)
                
                if not df_price.empty and '종가' in df_price.columns:
                    avg_price = df_price['종가'].mean()

                    # 2. Get fundamental data (BPS) for the quarter
                    df_fundamental = stock.get_market_fundamental(start_date, end_date, ticker)

                    if not df_fundamental.empty:
                        # Use the last known BPS value in the quarter
                        last_bps = df_fundamental['BPS'].dropna().iloc[-1] if not df_fundamental['BPS'].dropna().empty else 0
                        
                        # 3. Calculate PBR using the average price
                        if last_bps is not None and last_bps > 0:
                            pbr = avg_price / last_bps
            except Exception:
                # This can happen if the stock was not listed or had no trades.
                pass

            row_data[f'{q_name}_PBR'] = pbr
            time.sleep(0.1)  # Be polite to the server

        all_data.append(row_data)

    # Create the final DataFrame
    if not all_data:
        print("No data was processed. Exiting.")
        return

    df_final = pd.DataFrame(all_data)

    # Define and set the column order as requested
    final_columns = ['Ticker', 'Name']
    for q_name in quarters.keys():
        final_columns.append(f'{q_name}_PBR')
    
    # Ensure all requested columns exist, fill with None if not
    for col in final_columns:
        if col not in df_final.columns:
            df_final[col] = None
            
    df_final = df_final[final_columns]

    # Save the report to a CSV file
    output_filename = 'pbr_report_all.csv'
    df_final.to_csv(output_filename, index=False, encoding='utf-8-sig')
    print(f"\nSuccessfully created the report: {output_filename}")

if __name__ == '__main__':
    get_pbr_report_all()
